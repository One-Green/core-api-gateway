# https://taskfile.dev

version: '3'

dotenv: ['.env']

tasks:

  default:
    desc: print task list
    cmds:
      - task --list-all

  mqtt:
    desc: start mqtt server
    cmds:
      - sudo docker rm mqtt-dev --force || true
      - sudo docker run  --name mqtt-dev -d  -p 1883:1883  -e MOSQUITTO_USERNAME=admin -e MOSQUITTO_PASSWORD=admin docker.io/shanisma/paho-mqtt:1.6.2

  redis:
    desc: start redis server
    cmds:
      - sudo docker rm redis-dev --force || true
      - sudo docker run --name redis-dev -d -p 6379:6379 redis:6.0.10-alpine
  pg:
    desc: start postgres
    cmds:
      - sudo docker rm postgres-dev --force || true
      - sudo docker run --name postgres-dev -d -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres  postgres

  celery:
    desc: start celery worker
    cmds:
      - celery -A project worker -l info

  up-db:
    desc: run db initialization
    cmds:
      - task pg
      - sleep 5
      - find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
      - find . -path "*/migrations/*.pyc"  -delete
      - python init.py

  build-dev:
    desc: build docker image dev
    cmds:
      - sudo docker build -t {{.IMAGE}}:{{.TAG}} .
      - sudo docker tag {{.IMAGE}}:{{.TAG}} {{.IMAGE}}:latest
      - sudo docker push {{.IMAGE}}:{{.TAG}}
      - sudo docker push {{.IMAGE}}:latest
    vars:
      IMAGE: docker.io/shanisma/og-core
      TAG: 0.0.9

  start-api:
    desc: start api
    cmds:
      - task up-db
      - python manage.py runserver 0.0.0.0:8001

  test-core:
    desc: run /core/tests py files
    cmds:
     - python ${PWD}/core/tests/test_base_controller.py
     - python ${PWD}/core/tests/test_base_time_range_controller.py

  test-api:
    desc: test apis
    cmds:
      - python manage.py test sprinkler
      - python manage.py test water
      - python manage.py test light

  test:
    desc: run all test
    cmds:
      - task up-db
      - test-core
      - test-api

  pf:
    desc: freeze Python requirements.txt
    cmds:
      - pipenv run pip freeze > requirements.txt

  r:
    desc: get urls for reverse usage
    cmds:
      - task up-db
      - python get_routes.py

  o:
    desc: generate openapi schema
    cmds:
      - wget http://0.0.0.0:8001/\?format\=openapi -o openapi-schema.json

  py-sdk:
    desc: generate python sdk og-core-api
    cmds:
      - openapi-generator-cli generate -i openapi-schema.json -g python -o ../og-py-openapi-client

  js-sdk:
    desc: generate javascript sdk og-core-api
    cmds:
      - openapi-generator-cli generate -i openapi-schema.json -g javascript -o ../og-ts-openapi-client